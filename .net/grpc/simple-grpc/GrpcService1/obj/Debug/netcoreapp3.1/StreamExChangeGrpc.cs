// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: StreamExChange.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcService1 {
  /// <summary>
  ///定义服务
  /// </summary>
  public static partial class StreamExChange
  {
    static readonly string __ServiceName = "StreamExChange.StreamExChange";

    static readonly grpc::Marshaller<global::GrpcService1.StreamReqData> __Marshaller_StreamExChange_StreamReqData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcService1.StreamReqData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcService1.StreamResData> __Marshaller_StreamExChange_StreamResData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcService1.StreamResData.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcService1.StreamReqData, global::GrpcService1.StreamResData> __Method_GetStream = new grpc::Method<global::GrpcService1.StreamReqData, global::GrpcService1.StreamResData>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetStream",
        __Marshaller_StreamExChange_StreamReqData,
        __Marshaller_StreamExChange_StreamResData);

    static readonly grpc::Method<global::GrpcService1.StreamReqData, global::GrpcService1.StreamResData> __Method_PutStream = new grpc::Method<global::GrpcService1.StreamReqData, global::GrpcService1.StreamResData>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "PutStream",
        __Marshaller_StreamExChange_StreamReqData,
        __Marshaller_StreamExChange_StreamResData);

    static readonly grpc::Method<global::GrpcService1.StreamReqData, global::GrpcService1.StreamResData> __Method_AllStream = new grpc::Method<global::GrpcService1.StreamReqData, global::GrpcService1.StreamResData>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "AllStream",
        __Marshaller_StreamExChange_StreamReqData,
        __Marshaller_StreamExChange_StreamResData);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcService1.StreamExChangeReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StreamExChange</summary>
    [grpc::BindServiceMethod(typeof(StreamExChange), "BindService")]
    public abstract partial class StreamExChangeBase
    {
      /// <summary>
      ///
      ///以下 分别是 服务端 推送流， 客户端 推送流 ，双向流。
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetStream(global::GrpcService1.StreamReqData request, grpc::IServerStreamWriter<global::GrpcService1.StreamResData> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcService1.StreamResData> PutStream(grpc::IAsyncStreamReader<global::GrpcService1.StreamReqData> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task AllStream(grpc::IAsyncStreamReader<global::GrpcService1.StreamReqData> requestStream, grpc::IServerStreamWriter<global::GrpcService1.StreamResData> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StreamExChangeBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetStream, serviceImpl.GetStream)
          .AddMethod(__Method_PutStream, serviceImpl.PutStream)
          .AddMethod(__Method_AllStream, serviceImpl.AllStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StreamExChangeBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::GrpcService1.StreamReqData, global::GrpcService1.StreamResData>(serviceImpl.GetStream));
      serviceBinder.AddMethod(__Method_PutStream, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::GrpcService1.StreamReqData, global::GrpcService1.StreamResData>(serviceImpl.PutStream));
      serviceBinder.AddMethod(__Method_AllStream, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::GrpcService1.StreamReqData, global::GrpcService1.StreamResData>(serviceImpl.AllStream));
    }

  }
}
#endregion
